<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentMustBeGreaterThanOrEqualTo" xml:space="preserve">
    <value>Value must be greater than or equal to {0}.</value>
  </data>
  <data name="ArgumentMustBeLessThanOrEqualTo" xml:space="preserve">
    <value>Value must be less than or equal to {0}.</value>
  </data>
  <data name="ArgumentNullOrEmpty" xml:space="preserve">
    <value>The argument '{0}' is null or empty.</value>
  </data>
  <data name="ArgumentNullOrWhitespace" xml:space="preserve">
    <value>The argument '{0}' is null, empty or only includes white space.</value>
  </data>
  <data name="NavigationPropertyNotInHierarchy" xml:space="preserve">
    <value>The declaring entity type '{0}' of the given navigation property is not a part of the entity type '{1}' hierarchy of the entity set or singleton '{2}'.</value>
  </data>
  <data name="UnsupportedExpressionNodeType" xml:space="preserve">
    <value>Unsupported Expression NodeType.</value>
  </data>
  <data name="UnsupportedExpressionNodeTypeWithName" xml:space="preserve">
    <value>Unsupported Expression NodeType '{0}'.</value>
  </data>
  <data name="EqualExpressionsMustHaveSameTypes" xml:space="preserve">
    <value>The type of left property '{0}.{1}' is '{2}' while the type of right property '{3}.{4}' is '{5}'. The left and right type of the equal expression must be same.</value>
  </data>
  <data name="LambdaExpressionMustHaveExactlyOneParameter" xml:space="preserve">
    <value>The LambdaExpression must have exactly one parameter.</value>
  </data>
  <data name="LambdaExpressionMustHaveExactlyTwoParameters" xml:space="preserve">
    <value>The LambdaExpression must have exactly two parameters.</value>
  </data>
  <data name="MemberExpressionsMustBeBoundToLambdaParameter" xml:space="preserve">
    <value>MemberExpressions must be bound to the LambdaExpression parameter.</value>
  </data>
  <data name="MemberExpressionsMustBeProperties" xml:space="preserve">
    <value>Member '{0}.{1}' is not a property.</value>
  </data>
  <data name="PropertyDoesNotBelongToType" xml:space="preserve">
    <value>The property '{0}' does not belong to the type '{1}'.</value>
  </data>
  <data name="InvalidBindingParameterType" xml:space="preserve">
    <value>Invalid bindingParameter type '{0}'. A bindingParameter must be either an EntityType or a Collection of EntityTypes.</value>
  </data>
  <data name="RebindingNotSupported" xml:space="preserve">
    <value>Cannot bind the navigation property'{0}' from navigation source '{1}' to navigation source '{2}' because it has already been binded to navigation source '{3}'.</value>
  </data>
  <data name="TypeCannotBeEntityWasComplex" xml:space="preserve">
    <value>The type '{0}' cannot be configured as an EntityType. It was previously configured as a ComplexType.</value>
  </data>
  <data name="TypeCannotBeComplexWasEntity" xml:space="preserve">
    <value>The type '{0}' cannot be configured as a ComplexType. It was previously configured as an EntityType.</value>
  </data>
  <data name="TypeCannotBeEnum" xml:space="preserve">
    <value>The type '{0}' cannot be configured as an enum type.</value>
  </data>
  <data name="CannotDefineKeysOnDerivedTypes" xml:space="preserve">
    <value>Cannot define keys on type '{0}' deriving from '{1}'. The base type in the entity inheritance hierarchy already contains keys.</value>
  </data>
  <data name="CannotRedefineBaseTypeProperty" xml:space="preserve">
    <value>Cannot redefine property '{0}' already defined on the base type '{1}'.</value>
  </data>
  <data name="MultipleMatchingClrTypesForEdmType" xml:space="preserve">
    <value>More than one matching CLR type found for the EDM type {0}.\nThe matching CLR types are {1}.</value>
  </data>
  <data name="InvalidPropertyMapping" xml:space="preserve">
    <value>The key mapping for the property '{0}' can't be null or empty.</value>
  </data>
  <data name="InvalidEntitySetName" xml:space="preserve">
    <value>'{0}' is not a valid entity set name.</value>
  </data>
  <data name="InvalidSingletonName" xml:space="preserve">
    <value>'{0}' is not a valid singleton name. The singleton name cannot contain '.'.</value>
  </data>
  <data name="MoreThanOneOperationFound" xml:space="preserve">
    <value>More than one Operation called '{0}' was found. Try using the other RemoveOperation override.</value>
  </data>
  <data name="ManyNavigationPropertiesCannotBeChanged" xml:space="preserve">
    <value>Cannot change multiplicity of the collection navigation property '{0}'.</value>
  </data>
  <data name="ManyToManyNavigationPropertyMustReturnCollection" xml:space="preserve">
    <value>The property '{0}' on the type '{1}' is being configured as a Many-to-Many navigation property. Many to Many navigation properties must be collections.</value>
  </data>
  <data name="EntitySetAlreadyConfiguredDifferentEntityType" xml:space="preserve">
    <value>The entity set '{0}' was already configured with a different EntityType ('{1}').</value>
  </data>
  <data name="EntitySetNameAlreadyConfiguredAsSingleton" xml:space="preserve">
    <value>The entity set name '{0}' was already configured as a singleton.</value>
  </data>
  <data name="SingletonAlreadyConfiguredDifferentEntityType" xml:space="preserve">
    <value>The singleton '{0}' was already configured with a different EntityType ('{1}').</value>
  </data>
  <data name="SingletonNameAlreadyConfiguredAsEntitySet" xml:space="preserve">
    <value>The singleton name '{0}' was already configured as an entity set.</value>
  </data>
  <data name="ReturnEntityCollectionWithoutEntitySet" xml:space="preserve">
    <value>The EDM type '{0}' is already declared as an entity type. Use the method 'ReturnsCollectionFromEntitySet' if the return type is an entity collection.</value>
  </data>
  <data name="ReturnEntityWithoutEntitySet" xml:space="preserve">
    <value>The EDM type '{0}' is already declared as an entity type. Use the method 'ReturnsFromEntitySet' if the return type is an entity.</value>
  </data>
  <data name="CollectionPropertiesMustReturnIEnumerable" xml:space="preserve">
    <value>CollectionProperties must implement IEnumerable&lt;&gt;. The property '{0}' declared on '{1}' does not implement IEnumerable&lt;&gt;.</value>
  </data>
  <data name="CannotAutoCreateMultipleCandidates" xml:space="preserve">
    <value>Cannot automatically bind the navigation property '{0}' on type '{1}' for the entity set or singleton '{2}' because there are two or more matching target entity sets or singletons. The matching entity sets or singletons are: {3}.</value>
  </data>
  <data name="EdmTypeNotSupported" xml:space="preserve">
    <value>{0} is not a supported EDM type.</value>
  </data>
  <data name="NavigationPropertyBindingPathIsNotValid" xml:space="preserve">
    <value>The navigation property binding path '{0}' is not valid. The last segment must be the navigation property '{1}'.</value>
  </data>
  <data name="NavigationPropertyBindingPathNotSupported" xml:space="preserve">
    <value>The navigation property binding path segment '{0}' of member type '{1}' is not supported.</value>
  </data>
  <data name="NavigationPropertyBindingPathNotInHierarchy" xml:space="preserve">
    <value>The type '{0}' of the binding type cast segment '{1}' is not a part of the type '{2}' hierarchy.</value>
  </data>
  <data name="ReferentialConstraintPropertyTypeNotValid" xml:space="preserve">
    <value>The property type '{0}' of the referential constraint is not valid. The referential constraint property type must be primitive type.</value>
  </data>
  <data name="ReferentialConstraintOnManyNavigationPropertyNotSupported" xml:space="preserve">
    <value>Referential constraint for navigation property '{0}' on type '{1}' is not supported. Only required or optional navigation properties support referential constraint.</value>
  </data>
  <data name="ReferentialConstraintAlreadyConfigured" xml:space="preserve">
    <value>The '{0}' property '{1}' is already configured to have a relationship with '{2}' property '{3}' in the referential constraint.</value>
  </data>
  <data name="DependentAndPrincipalTypeNotMatch" xml:space="preserve">
    <value>The dependent property type '{0}' is not same as the principal property type '{1}. The dependent and principal properties must have must have same types in the same order.</value>
  </data>
  <data name="TypeDoesNotInheritFromBaseType" xml:space="preserve">
    <value>'{0}' does not inherit from '{1}'.</value>
  </data>
  <data name="MustBeComplexProperty" xml:space="preserve">
    <value>The property '{0}' on type '{1}' must be a Complex property.</value>
  </data>
  <data name="MustBeNavigationProperty" xml:space="preserve">
    <value>The property  '{0}' on type '{1}' must be a Navigation property.</value>
  </data>
  <data name="MustBePrimitiveProperty" xml:space="preserve">
    <value>The property '{0}'  on type '{1}' must be a Primitive property.</value>
  </data>
  <data name="MustBeEnumProperty" xml:space="preserve">
    <value>The property '{0}' on type '{1}' must be an Enum property.</value>
  </data>
  <data name="MustBeUntypedProperty" xml:space="preserve">
    <value>The property '{0}' on type '{1}' must be a System.Object property.</value>
  </data>
  <data name="MustBeDateTimeProperty" xml:space="preserve">
    <value>The property '{0}' on type '{1}' must be a System.DateTime or System.DateOnly property.</value>
  </data>
  <data name="MustBeTimeSpanProperty" xml:space="preserve">
    <value>The property '{0}' on type '{1}' must be a System.TimeSpan property.</value>
  </data>
  <data name="MustHaveMatchingMultiplicity" xml:space="preserve">
    <value>The multiplicity of the '{0}' property must be '{1}'.</value>
  </data>
  <data name="MustBePrimitiveType" xml:space="preserve">
    <value>The type '{0}' must be a primitive type.</value>
  </data>
  <data name="ArgumentMustBeOfType" xml:space="preserve">
    <value>The argument must be of type '{0}'.</value>
  </data>
  <data name="MoreThanOneDynamicPropertyContainerFound" xml:space="preserve">
    <value>Found more than one dynamic property container in type '{0}'. Each open type must have at most one dynamic property container.</value>
  </data>
  <data name="MustBeCollectionProperty" xml:space="preserve">
    <value>The '{0}' property on '{1}' must be a Collection property.</value>
  </data>
  <data name="PropertyAlreadyDefinedInDerivedType" xml:space="preserve">
    <value>Cannot define property '{0}' in the base type '{1}' as the derived type '{2}' already defines it.</value>
  </data>
  <data name="MultipleAttributesFound" xml:space="preserve">
    <value>The member '{0}' on type '{1}' contains multiple instances of the attribute '{2}'.</value>
  </data>
  <data name="EntitySetTypeHasNoKeys" xml:space="preserve">
    <value>The entity set '{0}' is based on type '{1}' that has no keys defined.</value>
  </data>
  <data name="CollectionNavigationPropertyEntityTypeDoesntHaveKeyDefined" xml:space="preserve">
    <value>The entity type '{0}' of navigation property '{1}' on structural type '{2}' does not have a key defined.</value>
  </data>
  <data name="InvalidPropertyInfoForDynamicPropertyAnnotation" xml:space="preserve">
    <value>Type '{0}' is not supported as dynamic property annotation. Referenced property must be of type '{1}'.</value>
  </data>
  <data name="NoMatchingIEdmTypeFound" xml:space="preserve">
    <value>No IEdmType could be found for '{0}'.</value>
  </data>
  <data name="UnsupportedEdmTypeKind" xml:space="preserve">
    <value>Found unsupported EdmTypeKind '{0}' in list of available types.</value>
  </data>
  <data name="EntitySetNotFoundForName" xml:space="preserve">
    <value>No EntitySet exists in the EdmModel with entitySetName '{0}'.</value>
  </data>
  <data name="MoreThanOneOverloadActionBoundToSameTypeFound" xml:space="preserve">
    <value>Found more than one action with name '{0}' bound to the same type '{1}'. Each bound action must have a different binding type or name.</value>
  </data>
  <data name="MoreThanOneUnboundActionFound" xml:space="preserve">
    <value>Found more than one unbound action with name '{0}'. Each unbound action must have an unique action name.</value>
  </data>
  <data name="OperationHasInvalidEntitySetPath" xml:space="preserve">
    <value>Invalid EntitySetPath detected. '{0}' is not a valid entity set path for operation '{1}'.</value>
  </data>
  <data name="EnumValueCannotBeLong" xml:space="preserve">
    <value>The value of enum member '{0}' cannot be converted to a long type.</value>
  </data>
  <data name="EnumTypeDoesNotExist" xml:space="preserve">
    <value>The enum type '{0}' does not exist.</value>
  </data>
  <data name="TargetEntityTypeMissing" xml:space="preserve">
    <value>Could not find the target entity type for the navigation property '{0}' on entity type '{1}'.</value>
  </data>
  <data name="GetEdmModelCalledMoreThanOnce" xml:space="preserve">
    <value>GetEdmModel cannot be called more than once. Consider using a different instance of the model builder or reusing the model you have built earlier.</value>
  </data>
  <data name="CannotReconfigEntityTypeAsComplexType" xml:space="preserve">
    <value>The entity type '{0}' cannot be configured as a complex type because the derived type '{1}' is already configured as an entity type.</value>
  </data>
  <data name="CannotInferEdmType" xml:space="preserve">
    <value>Cannot determine the Edm type for the CLR type '{0}' because the derived type '{1}' is configured as entity type and another derived type '{2}' is configured as complex type.</value>
  </data>
  <data name="MoreThanOneAnnotationPropertyContainerFound" xml:space="preserve">
    <value>Found more than one Annotation property container in type '{0}'. Each open type must have at most one Annotation property container.</value>
  </data>
  <data name="InvalidInstanceAnnotationName" xml:space="preserve">
    <value>The input instance annotation name '{0}' is not invalid. An instance annotation should be simple identifier with '.' in it.</value>
  </data>
</root>