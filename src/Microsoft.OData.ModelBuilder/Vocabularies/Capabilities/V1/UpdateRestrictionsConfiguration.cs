// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Capabilities.V1
{
    /// <summary>
    /// Restrictions on update operations
    /// </summary>
    public partial class UpdateRestrictionsConfiguration : VocabularyTermConfiguration
    {
        private readonly Dictionary<string, object> _dynamicProperties = new Dictionary<string, object>();
        private bool? _updatable;
        private bool? _upsertable;
        private bool? _deltaUpdateSupported;
        private HttpMethod? _updateMethod;
        private bool? _filterSegmentSupported;
        private bool? _typecastSegmentSupported;
        private readonly HashSet<EdmPropertyPathExpression> _nonUpdatableProperties = new HashSet<EdmPropertyPathExpression>();
        private readonly HashSet<EdmNavigationPropertyPathExpression> _nonUpdatableNavigationProperties = new HashSet<EdmNavigationPropertyPathExpression>();
        private readonly HashSet<EdmPropertyPathExpression> _requiredProperties = new HashSet<EdmPropertyPathExpression>();
        private int? _maxLevels;
        private readonly HashSet<PermissionTypeConfiguration> _permissions = new HashSet<PermissionTypeConfiguration>();
        private ModificationQueryOptionsConfiguration _queryOptions;
        private readonly HashSet<CustomParameterConfiguration> _customHeaders = new HashSet<CustomParameterConfiguration>();
        private readonly HashSet<CustomParameterConfiguration> _customQueryOptions = new HashSet<CustomParameterConfiguration>();
        private string _description;
        private string _longDescription;
        private readonly HashSet<HttpResponseConfiguration> _errorResponses = new HashSet<HttpResponseConfiguration>();

        /// <inheritdoc/>
        public override string TermName => "Org.OData.Capabilities.V1.UpdateRestrictions";

        /// <summary>
        /// Dynamic properties.
        /// </summary>
        /// <param name="name">The name to set</param>
        /// <param name="value">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasDynamicProperty(string name, object value)
        {
            _dynamicProperties[name] = value;
            return this;
        }

        /// <summary>
        /// Entities can be updated
        /// </summary>
        /// <param name="updatable">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration IsUpdatable(bool updatable)
        {
            _updatable = updatable;
            return this;
        }

        /// <summary>
        /// Entities can be upserted
        /// </summary>
        /// <param name="upsertable">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration IsUpsertable(bool upsertable)
        {
            _upsertable = upsertable;
            return this;
        }

        /// <summary>
        /// Entities can be inserted, updated, and deleted via a PATCH request with a delta payload
        /// </summary>
        /// <param name="deltaUpdateSupported">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration IsDeltaUpdateSupported(bool deltaUpdateSupported)
        {
            _deltaUpdateSupported = deltaUpdateSupported;
            return this;
        }

        /// <summary>
        /// Supported HTTP Methods (PUT or PATCH) for updating an entity.  If null, PATCH SHOULD be supported and PUT MAY be supported.
        /// </summary>
        /// <param name="updateMethod">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasUpdateMethod(HttpMethod updateMethod)
        {
            _updateMethod = updateMethod;
            return this;
        }

        /// <summary>
        /// Members of collections can be updated via a PATCH request with a `/$filter(...)/$each` segment
        /// </summary>
        /// <param name="filterSegmentSupported">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration IsFilterSegmentSupported(bool filterSegmentSupported)
        {
            _filterSegmentSupported = filterSegmentSupported;
            return this;
        }

        /// <summary>
        /// Members of collections can be updated via a PATCH request with a type-cast segment and a `/$each` segment
        /// </summary>
        /// <param name="typecastSegmentSupported">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration IsTypecastSegmentSupported(bool typecastSegmentSupported)
        {
            _typecastSegmentSupported = typecastSegmentSupported;
            return this;
        }

        /// <summary>
        /// These structural properties cannot be updated
        /// </summary>
        /// <param name="nonUpdatableProperties">The value(s) to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasNonUpdatableProperties(params EdmPropertyPathExpression[] nonUpdatableProperties)
        {
            _nonUpdatableProperties.UnionWith(nonUpdatableProperties);
            return this;
        }

        /// <summary>
        /// These navigation properties do not allow rebinding
        /// </summary>
        /// <param name="nonUpdatableNavigationProperties">The value(s) to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasNonUpdatableNavigationProperties(params EdmNavigationPropertyPathExpression[] nonUpdatableNavigationProperties)
        {
            _nonUpdatableNavigationProperties.UnionWith(nonUpdatableNavigationProperties);
            return this;
        }

        /// <summary>
        /// These structural properties must be specified on update
        /// </summary>
        /// <param name="requiredProperties">The value(s) to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasRequiredProperties(params EdmPropertyPathExpression[] requiredProperties)
        {
            _requiredProperties.UnionWith(requiredProperties);
            return this;
        }

        /// <summary>
        /// The maximum number of navigation properties that can be traversed when addressing the collection or entity to update. A value of -1 indicates there is no restriction.
        /// </summary>
        /// <param name="maxLevels">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasMaxLevels(int maxLevels)
        {
            _maxLevels = maxLevels;
            return this;
        }

        /// <summary>
        /// Required permissions. One of the specified sets of scopes is required to perform the update.
        /// </summary>
        /// <param name="permissionsConfiguration">The configuration to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasPermissions(Func<PermissionTypeConfiguration, PermissionTypeConfiguration> permissionsConfiguration)
        {
            var instance = new PermissionTypeConfiguration();
            instance = permissionsConfiguration?.Invoke(instance);
            return HasPermissions(instance);
        }

        /// <summary>
        /// Required permissions. One of the specified sets of scopes is required to perform the update.
        /// </summary>
        /// <param name="permissions">The value(s) to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasPermissions(params PermissionTypeConfiguration[] permissions)
        {
            _permissions.UnionWith(permissions);
            return this;
        }

        /// <summary>
        /// Support for query options with update requests
        /// </summary>
        /// <param name="queryOptionsConfiguration">The configuration to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasQueryOptions(Func<ModificationQueryOptionsConfiguration, ModificationQueryOptionsConfiguration> queryOptionsConfiguration)
        {
            var instance = _queryOptions ?? new ModificationQueryOptionsConfiguration();
            instance = queryOptionsConfiguration?.Invoke(instance);
            return HasQueryOptions(instance);
        }

        /// <summary>
        /// Support for query options with update requests
        /// </summary>
        /// <param name="queryOptions">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasQueryOptions(ModificationQueryOptionsConfiguration queryOptions)
        {
            _queryOptions = queryOptions;
            return this;
        }

        /// <summary>
        /// Supported or required custom headers
        /// </summary>
        /// <param name="customHeadersConfiguration">The configuration to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasCustomHeaders(Func<CustomParameterConfiguration, CustomParameterConfiguration> customHeadersConfiguration)
        {
            var instance = new CustomParameterConfiguration();
            instance = customHeadersConfiguration?.Invoke(instance);
            return HasCustomHeaders(instance);
        }

        /// <summary>
        /// Supported or required custom headers
        /// </summary>
        /// <param name="customHeaders">The value(s) to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasCustomHeaders(params CustomParameterConfiguration[] customHeaders)
        {
            _customHeaders.UnionWith(customHeaders);
            return this;
        }

        /// <summary>
        /// Supported or required custom query options
        /// </summary>
        /// <param name="customQueryOptionsConfiguration">The configuration to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasCustomQueryOptions(Func<CustomParameterConfiguration, CustomParameterConfiguration> customQueryOptionsConfiguration)
        {
            var instance = new CustomParameterConfiguration();
            instance = customQueryOptionsConfiguration?.Invoke(instance);
            return HasCustomQueryOptions(instance);
        }

        /// <summary>
        /// Supported or required custom query options
        /// </summary>
        /// <param name="customQueryOptions">The value(s) to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasCustomQueryOptions(params CustomParameterConfiguration[] customQueryOptions)
        {
            _customQueryOptions.UnionWith(customQueryOptions);
            return this;
        }

        /// <summary>
        /// A brief description of the request
        /// </summary>
        /// <param name="description">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasDescription(string description)
        {
            _description = description;
            return this;
        }

        /// <summary>
        /// A long description of the request
        /// </summary>
        /// <param name="longDescription">The value to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasLongDescription(string longDescription)
        {
            _longDescription = longDescription;
            return this;
        }

        /// <summary>
        /// Possible error responses returned by the request.
        /// </summary>
        /// <param name="errorResponsesConfiguration">The configuration to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasErrorResponses(Func<HttpResponseConfiguration, HttpResponseConfiguration> errorResponsesConfiguration)
        {
            var instance = new HttpResponseConfiguration();
            instance = errorResponsesConfiguration?.Invoke(instance);
            return HasErrorResponses(instance);
        }

        /// <summary>
        /// Possible error responses returned by the request.
        /// </summary>
        /// <param name="errorResponses">The value(s) to set</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public UpdateRestrictionsConfiguration HasErrorResponses(params HttpResponseConfiguration[] errorResponses)
        {
            _errorResponses.UnionWith(errorResponses);
            return this;
        }

        /// <inheritdoc/>
        public override IEdmExpression ToEdmExpression()
        {
            var properties = new List<IEdmPropertyConstructor>();

            if (_updatable.HasValue)
            {
                properties.Add(new EdmPropertyConstructor("Updatable", new EdmBooleanConstant(_updatable.Value)));
            }

            if (_upsertable.HasValue)
            {
                properties.Add(new EdmPropertyConstructor("Upsertable", new EdmBooleanConstant(_upsertable.Value)));
            }

            if (_deltaUpdateSupported.HasValue)
            {
                properties.Add(new EdmPropertyConstructor("DeltaUpdateSupported", new EdmBooleanConstant(_deltaUpdateSupported.Value)));
            }

            if (_updateMethod.HasValue)
            {
                var enumType = new EdmEnumType("Org.OData.Capabilities.V1", "HttpMethod", true);
                var enumMember = new EdmEnumMember(enumType, _updateMethod.ToString(), new EdmEnumMemberValue((long)_updateMethod.Value));
                properties.Add(new EdmPropertyConstructor("UpdateMethod", new EdmEnumMemberExpression(enumMember)));
            }

            if (_filterSegmentSupported.HasValue)
            {
                properties.Add(new EdmPropertyConstructor("FilterSegmentSupported", new EdmBooleanConstant(_filterSegmentSupported.Value)));
            }

            if (_typecastSegmentSupported.HasValue)
            {
                properties.Add(new EdmPropertyConstructor("TypecastSegmentSupported", new EdmBooleanConstant(_typecastSegmentSupported.Value)));
            }

            if (_nonUpdatableProperties.Any())
            {
                var collection = _nonUpdatableProperties.Where(item => item != null);
                if (collection.Any())
                {
                    properties.Add(new EdmPropertyConstructor("NonUpdatableProperties", new EdmCollectionExpression(collection)));
                }
            }

            if (_nonUpdatableNavigationProperties.Any())
            {
                var collection = _nonUpdatableNavigationProperties.Where(item => item != null);
                if (collection.Any())
                {
                    properties.Add(new EdmPropertyConstructor("NonUpdatableNavigationProperties", new EdmCollectionExpression(collection)));
                }
            }

            if (_requiredProperties.Any())
            {
                var collection = _requiredProperties.Where(item => item != null);
                if (collection.Any())
                {
                    properties.Add(new EdmPropertyConstructor("RequiredProperties", new EdmCollectionExpression(collection)));
                }
            }

            if (_maxLevels.HasValue)
            {
                properties.Add(new EdmPropertyConstructor("MaxLevels", new EdmIntegerConstant(_maxLevels.Value)));
            }

            if (_permissions.Any())
            {
                var collection = _permissions.Select(item => item.ToEdmExpression()).Where(item => item != null);
                if (collection.Any())
                {
                    properties.Add(new EdmPropertyConstructor("Permissions", new EdmCollectionExpression(collection)));
                }
            }

            if (_queryOptions != null)
            {
                properties.Add(new EdmPropertyConstructor("QueryOptions", _queryOptions.ToEdmExpression()));
            }

            if (_customHeaders.Any())
            {
                var collection = _customHeaders.Select(item => item.ToEdmExpression()).Where(item => item != null);
                if (collection.Any())
                {
                    properties.Add(new EdmPropertyConstructor("CustomHeaders", new EdmCollectionExpression(collection)));
                }
            }

            if (_customQueryOptions.Any())
            {
                var collection = _customQueryOptions.Select(item => item.ToEdmExpression()).Where(item => item != null);
                if (collection.Any())
                {
                    properties.Add(new EdmPropertyConstructor("CustomQueryOptions", new EdmCollectionExpression(collection)));
                }
            }

            if (!string.IsNullOrEmpty(_description))
            {
                properties.Add(new EdmPropertyConstructor("Description", new EdmStringConstant(_description)));
            }

            if (!string.IsNullOrEmpty(_longDescription))
            {
                properties.Add(new EdmPropertyConstructor("LongDescription", new EdmStringConstant(_longDescription)));
            }

            if (_errorResponses.Any())
            {
                var collection = _errorResponses.Select(item => item.ToEdmExpression()).Where(item => item != null);
                if (collection.Any())
                {
                    properties.Add(new EdmPropertyConstructor("ErrorResponses", new EdmCollectionExpression(collection)));
                }
            }

            properties.AddRange(_dynamicProperties.ToEdmProperties());

            if (!properties.Any())
            {
                return null;
            }

            return new EdmRecordExpression(properties);
        }
    }
}
