// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Core.V1
{
    /// <summary>
    /// Data modification requires the use of ETags. A non-empty collection contains the set of properties that are used to compute the ETag. An empty collection means that the service won't tell how it computes the ETag
    /// </summary>
    public partial class OptimisticConcurrencyConfiguration : VocabularyTermConfiguration
    {
        private readonly HashSet<EdmPropertyPathExpression> _optimisticConcurrency = new HashSet<EdmPropertyPathExpression>();

        /// <inheritdoc/>
        public override string TermName => "Org.OData.Core.V1.OptimisticConcurrency";

        /// <summary>
        /// Data modification requires the use of ETags. A non-empty collection contains the set of properties that are used to compute the ETag. An empty collection means that the service won't tell how it computes the ETag
        /// </summary>
        /// <param name="optimisticConcurrency">The value(s) to set</param>
        /// <returns><see cref="OptimisticConcurrencyConfiguration"/></returns>
        public OptimisticConcurrencyConfiguration HasOptimisticConcurrency(params EdmPropertyPathExpression[] optimisticConcurrency)
        {
            _optimisticConcurrency.UnionWith(optimisticConcurrency);
            return this;
        }

        /// <inheritdoc/>
        public override IEdmExpression ToEdmExpression()
        {
            if (!_optimisticConcurrency.Any())
            {
                return null;
            }

            var records = _optimisticConcurrency;
            return new EdmCollectionExpression(records);
        }
    }
}
