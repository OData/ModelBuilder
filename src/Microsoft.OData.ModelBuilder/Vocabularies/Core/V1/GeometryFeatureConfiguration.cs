// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Core.V1
{
    /// <summary>
    /// A [Feature Object](https://datatracker.ietf.org/doc/html/rfc7946#section-3.2) represents a spatially bounded thing
    /// </summary>
    public partial class GeometryFeatureConfiguration : VocabularyTermConfiguration
    {
        private readonly Dictionary<string, object> _dynamicProperties = new Dictionary<string, object>();
        private Microsoft.Spatial.Geometry _geometry;
        private DictionaryConfiguration _properties;
        private string _id;

        /// <inheritdoc/>
        public override string TermName => "Org.OData.Core.V1.GeometryFeature";

        /// <summary>
        /// Dynamic properties.
        /// </summary>
        /// <param name="name">The name to set</param>
        /// <param name="value">The value to set</param>
        /// <returns><see cref="GeometryFeatureConfiguration"/></returns>
        public GeometryFeatureConfiguration HasDynamicProperty(string name, object value)
        {
            _dynamicProperties[name] = value;
            return this;
        }

        /// <summary>
        /// Location of the Feature
        /// </summary>
        /// <param name="geometry">The value to set</param>
        /// <returns><see cref="GeometryFeatureConfiguration"/></returns>
        public GeometryFeatureConfiguration Hasgeometry(Microsoft.Spatial.Geometry geometry)
        {
            _geometry = geometry;
            return this;
        }

        /// <summary>
        /// Properties of the Feature
        /// </summary>
        /// <param name="propertiesConfiguration">The configuration to set</param>
        /// <returns><see cref="GeometryFeatureConfiguration"/></returns>
        public GeometryFeatureConfiguration Hasproperties(Func<DictionaryConfiguration, DictionaryConfiguration> propertiesConfiguration)
        {
            var instance = _properties ?? new DictionaryConfiguration();
            instance = propertiesConfiguration?.Invoke(instance);
            return Hasproperties(instance);
        }

        /// <summary>
        /// Properties of the Feature
        /// </summary>
        /// <param name="properties">The value to set</param>
        /// <returns><see cref="GeometryFeatureConfiguration"/></returns>
        public GeometryFeatureConfiguration Hasproperties(DictionaryConfiguration properties)
        {
            _properties = properties;
            return this;
        }

        /// <summary>
        /// Commonly used identifer for a Feature
        /// </summary>
        /// <param name="id">The value to set</param>
        /// <returns><see cref="GeometryFeatureConfiguration"/></returns>
        public GeometryFeatureConfiguration Hasid(string id)
        {
            _id = id;
            return this;
        }

        /// <inheritdoc/>
        public override IEdmExpression ToEdmExpression()
        {
            var properties = new List<IEdmPropertyConstructor>();

            if (_geometry != null)
            {
                var formatter = Microsoft.Spatial.WellKnownTextSqlFormatter.Create(true);
                string geometryValue = Microsoft.Spatial.FormatterExtensions.Write(formatter, _geometry);
                properties.Add(new EdmPropertyConstructor("geometry", new EdmStringConstant(geometryValue)));
            }

            if (_properties != null)
            {
                properties.Add(new EdmPropertyConstructor("properties", _properties.ToEdmExpression()));
            }

            if (!string.IsNullOrEmpty(_id))
            {
                properties.Add(new EdmPropertyConstructor("id", new EdmStringConstant(_id)));
            }

            properties.AddRange(_dynamicProperties.ToEdmProperties());

            if (!properties.Any())
            {
                return null;
            }

            return new EdmRecordExpression(properties);
        }
    }
}
