// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Core.V1
{
    /// <summary>
    /// The target path of an annotation with the tagged term MUST start with an entity container or the annotation MUST be embedded within an entity container, entity set or singleton
    /// Services MAY additionally annotate a container-independent model element (entity type, property, navigation property) if allowed by the `AppliesTo` property of the term
    ///       and the annotation applies to all uses of that model element.
    /// </summary>
    public partial class AppliesViaContainerConfiguration : VocabularyTermConfiguration
    {
        private bool? _appliesViaContainer;

        /// <inheritdoc/>
        public override string TermName => "Org.OData.Core.V1.AppliesViaContainer";

        /// <summary>
        /// The target path of an annotation with the tagged term MUST start with an entity container or the annotation MUST be embedded within an entity container, entity set or singleton
        /// Services MAY additionally annotate a container-independent model element (entity type, property, navigation property) if allowed by the `AppliesTo` property of the term
        ///       and the annotation applies to all uses of that model element.
        /// </summary>
        /// <param name="appliesViaContainer">The value to set</param>
        /// <returns><see cref="AppliesViaContainerConfiguration"/></returns>
        public AppliesViaContainerConfiguration IsAppliesViaContainer(bool appliesViaContainer)
        {
            _appliesViaContainer = appliesViaContainer;
            return this;
        }

        /// <inheritdoc/>
        public override IEdmExpression ToEdmExpression()
        {
            return _appliesViaContainer.HasValue ? new EdmBooleanConstant(_appliesViaContainer.Value) : null;
        }
    }
}
