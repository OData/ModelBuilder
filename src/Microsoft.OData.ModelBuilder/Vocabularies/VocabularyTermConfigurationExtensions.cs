// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;
using Microsoft.OData.ModelBuilder.Vocabularies;
using Microsoft.OData.ModelBuilder.Capabilities.V1;
using Microsoft.OData.ModelBuilder.Core.V1;

namespace Microsoft.OData.ModelBuilder
{
    /// <summary>
    /// Extension methods for vocabulary builders configurations
    /// </summary>
    public static class VocabularyTermConfigurationExtensions
    {
        internal static IEdmExpression ToEdmExpression(this string text)
            => string.IsNullOrEmpty(text) ? null : new EdmStringConstant(text);
        /// <summary>
        /// <see cref="CallbackSupportedConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="CallbackSupportedConfiguration"/></returns>
        public static CallbackSupportedConfiguration HasCallbackSupported<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<CallbackSupportedConfiguration>();

        /// <summary>
        /// <see cref="ChangeTrackingConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ChangeTrackingConfiguration"/></returns>
        public static ChangeTrackingConfiguration HasChangeTracking<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ChangeTrackingConfiguration>();

        /// <summary>
        /// <see cref="ChangeTrackingConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ChangeTrackingConfiguration"/></returns>
        public static ChangeTrackingConfiguration HasChangeTracking(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ChangeTrackingConfiguration>();

        /// <summary>
        /// <see cref="CountRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="CountRestrictionsConfiguration"/></returns>
        public static CountRestrictionsConfiguration HasCountRestrictions<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<CountRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="NavigationRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="NavigationRestrictionsConfiguration"/></returns>
        public static NavigationRestrictionsConfiguration HasNavigationRestrictions<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<NavigationRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="IndexableByKeyConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="IndexableByKeyConfiguration"/></returns>
        public static IndexableByKeyConfiguration HasIndexableByKey<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<IndexableByKeyConfiguration>();

        /// <summary>
        /// <see cref="TopSupportedConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="TopSupportedConfiguration"/></returns>
        public static TopSupportedConfiguration HasTopSupported<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<TopSupportedConfiguration>();

        /// <summary>
        /// <see cref="SkipSupportedConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="SkipSupportedConfiguration"/></returns>
        public static SkipSupportedConfiguration HasSkipSupported<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<SkipSupportedConfiguration>();

        /// <summary>
        /// <see cref="ComputeSupportedConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ComputeSupportedConfiguration"/></returns>
        public static ComputeSupportedConfiguration HasComputeSupported<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ComputeSupportedConfiguration>();

        /// <summary>
        /// <see cref="SelectSupportConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="SelectSupportConfiguration"/></returns>
        public static SelectSupportConfiguration HasSelectSupport<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<SelectSupportConfiguration>();

        /// <summary>
        /// <see cref="FilterFunctionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="FilterFunctionsConfiguration"/></returns>
        public static FilterFunctionsConfiguration HasFilterFunctions<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<FilterFunctionsConfiguration>();

        /// <summary>
        /// <see cref="FilterRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="FilterRestrictionsConfiguration"/></returns>
        public static FilterRestrictionsConfiguration HasFilterRestrictions<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<FilterRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="SortRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="SortRestrictionsConfiguration"/></returns>
        public static SortRestrictionsConfiguration HasSortRestrictions<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<SortRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="ExpandRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ExpandRestrictionsConfiguration"/></returns>
        public static ExpandRestrictionsConfiguration HasExpandRestrictions<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ExpandRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="SearchRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="SearchRestrictionsConfiguration"/></returns>
        public static SearchRestrictionsConfiguration HasSearchRestrictions<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<SearchRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="InsertRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="InsertRestrictionsConfiguration"/></returns>
        public static InsertRestrictionsConfiguration HasInsertRestrictions<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<InsertRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="DeepInsertSupportConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="DeepInsertSupportConfiguration"/></returns>
        public static DeepInsertSupportConfiguration HasDeepInsertSupport<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<DeepInsertSupportConfiguration>();

        /// <summary>
        /// <see cref="UpdateRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="UpdateRestrictionsConfiguration"/></returns>
        public static UpdateRestrictionsConfiguration HasUpdateRestrictions<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<UpdateRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="DeepUpdateSupportConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="DeepUpdateSupportConfiguration"/></returns>
        public static DeepUpdateSupportConfiguration HasDeepUpdateSupport<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<DeepUpdateSupportConfiguration>();

        /// <summary>
        /// <see cref="DeleteRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="DeleteRestrictionsConfiguration"/></returns>
        public static DeleteRestrictionsConfiguration HasDeleteRestrictions<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<DeleteRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="CollectionPropertyRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="CollectionPropertyRestrictionsConfiguration"/></returns>
        public static CollectionPropertyRestrictionsConfiguration HasCollectionPropertyRestrictions<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource, Func<CollectionPropertyRestrictionsTypeConfiguration, CollectionPropertyRestrictionsTypeConfiguration> sourceConfigurations) where TEntity : class
        {
            var instance = new CollectionPropertyRestrictionsTypeConfiguration();
            sourceConfigurations(instance);

            var configuration = navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<CollectionPropertyRestrictionsConfiguration>();
            configuration.HasCollectionPropertyRestrictions(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="OperationRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="OperationRestrictionsConfiguration"/></returns>
        public static OperationRestrictionsConfiguration HasOperationRestrictions(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<OperationRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="ModificationQueryOptionsConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ModificationQueryOptionsConfiguration"/></returns>
        public static ModificationQueryOptionsConfiguration HasModificationQueryOptions(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ModificationQueryOptionsConfiguration>();

        /// <summary>
        /// <see cref="ReadRestrictionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ReadRestrictionsConfiguration"/></returns>
        public static ReadRestrictionsConfiguration HasReadRestrictions<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ReadRestrictionsConfiguration>();

        /// <summary>
        /// <see cref="MediaLocationUpdateSupportedConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="MediaLocationUpdateSupportedConfiguration"/></returns>
        public static MediaLocationUpdateSupportedConfiguration HasMediaLocationUpdateSupported(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<MediaLocationUpdateSupportedConfiguration>();

        /// <summary>
        /// <see cref="MediaLocationUpdateSupportedConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="MediaLocationUpdateSupportedConfiguration"/></returns>
        public static MediaLocationUpdateSupportedConfiguration HasMediaLocationUpdateSupported<T>(this EntityTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<MediaLocationUpdateSupportedConfiguration>();

        /// <summary>
        /// <see cref="RevisionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="RevisionsConfiguration"/></returns>
        public static RevisionsConfiguration HasRevisions<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource, Func<RevisionTypeConfiguration, RevisionTypeConfiguration> sourceConfigurations) where TEntity : class
        {
            var instance = new RevisionTypeConfiguration();
            sourceConfigurations(instance);

            var configuration = navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<RevisionsConfiguration>();
            configuration.HasRevisions(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="RevisionsConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="RevisionsConfiguration"/></returns>
        public static RevisionsConfiguration HasRevisions(this VocabularyConfigurationsBase vocabularyConfigurationsBase, Func<RevisionTypeConfiguration, RevisionTypeConfiguration> sourceConfigurations)
        {
            var instance = new RevisionTypeConfiguration();
            sourceConfigurations(instance);

            var configuration = vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<RevisionsConfiguration>();
            configuration.HasRevisions(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="RevisionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="RevisionsConfiguration"/></returns>
        public static RevisionsConfiguration HasRevisions<T>(this StructuralTypeConfiguration<T> structuredType, Func<RevisionTypeConfiguration, RevisionTypeConfiguration> sourceConfigurations) where T : class
        {
            var instance = new RevisionTypeConfiguration();
            sourceConfigurations(instance);

            var configuration = structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<RevisionsConfiguration>();
            configuration.HasRevisions(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="DescriptionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="DescriptionConfiguration"/></returns>
        public static DescriptionConfiguration HasDescription<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<DescriptionConfiguration>();

        /// <summary>
        /// <see cref="DescriptionConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="DescriptionConfiguration"/></returns>
        public static DescriptionConfiguration HasDescription(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<DescriptionConfiguration>();

        /// <summary>
        /// <see cref="DescriptionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="DescriptionConfiguration"/></returns>
        public static DescriptionConfiguration HasDescription<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<DescriptionConfiguration>();

        /// <summary>
        /// <see cref="LongDescriptionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="LongDescriptionConfiguration"/></returns>
        public static LongDescriptionConfiguration HasLongDescription<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<LongDescriptionConfiguration>();

        /// <summary>
        /// <see cref="LongDescriptionConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="LongDescriptionConfiguration"/></returns>
        public static LongDescriptionConfiguration HasLongDescription(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<LongDescriptionConfiguration>();

        /// <summary>
        /// <see cref="LongDescriptionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="LongDescriptionConfiguration"/></returns>
        public static LongDescriptionConfiguration HasLongDescription<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<LongDescriptionConfiguration>();

        /// <summary>
        /// <see cref="LinksConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="LinksConfiguration"/></returns>
        public static LinksConfiguration HasLinks<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource, Func<LinkConfiguration, LinkConfiguration> sourceConfigurations) where TEntity : class
        {
            var instance = new LinkConfiguration();
            sourceConfigurations(instance);

            var configuration = navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<LinksConfiguration>();
            configuration.HasLinks(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="LinksConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="LinksConfiguration"/></returns>
        public static LinksConfiguration HasLinks(this VocabularyConfigurationsBase vocabularyConfigurationsBase, Func<LinkConfiguration, LinkConfiguration> sourceConfigurations)
        {
            var instance = new LinkConfiguration();
            sourceConfigurations(instance);

            var configuration = vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<LinksConfiguration>();
            configuration.HasLinks(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="LinksConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="LinksConfiguration"/></returns>
        public static LinksConfiguration HasLinks<T>(this StructuralTypeConfiguration<T> structuredType, Func<LinkConfiguration, LinkConfiguration> sourceConfigurations) where T : class
        {
            var instance = new LinkConfiguration();
            sourceConfigurations(instance);

            var configuration = structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<LinksConfiguration>();
            configuration.HasLinks(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="ExampleConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ExampleConfiguration"/></returns>
        public static ExampleConfiguration HasExample(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ExampleConfiguration>();

        /// <summary>
        /// <see cref="ExampleConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ExampleConfiguration"/></returns>
        public static ExampleConfiguration HasExample<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ExampleConfiguration>();

        /// <summary>
        /// <see cref="MessagesConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="MessagesConfiguration"/></returns>
        public static MessagesConfiguration HasMessages<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource, Func<MessageTypeConfiguration, MessageTypeConfiguration> sourceConfigurations) where TEntity : class
        {
            var instance = new MessageTypeConfiguration();
            sourceConfigurations(instance);

            var configuration = navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<MessagesConfiguration>();
            configuration.HasMessages(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="MessagesConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="MessagesConfiguration"/></returns>
        public static MessagesConfiguration HasMessages(this VocabularyConfigurationsBase vocabularyConfigurationsBase, Func<MessageTypeConfiguration, MessageTypeConfiguration> sourceConfigurations)
        {
            var instance = new MessageTypeConfiguration();
            sourceConfigurations(instance);

            var configuration = vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<MessagesConfiguration>();
            configuration.HasMessages(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="MessagesConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="MessagesConfiguration"/></returns>
        public static MessagesConfiguration HasMessages<T>(this StructuralTypeConfiguration<T> structuredType, Func<MessageTypeConfiguration, MessageTypeConfiguration> sourceConfigurations) where T : class
        {
            var instance = new MessageTypeConfiguration();
            sourceConfigurations(instance);

            var configuration = structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<MessagesConfiguration>();
            configuration.HasMessages(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="ValueExceptionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ValueExceptionConfiguration"/></returns>
        public static ValueExceptionConfiguration HasValueException<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ValueExceptionConfiguration>();

        /// <summary>
        /// <see cref="ValueExceptionConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ValueExceptionConfiguration"/></returns>
        public static ValueExceptionConfiguration HasValueException(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ValueExceptionConfiguration>();

        /// <summary>
        /// <see cref="ValueExceptionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ValueExceptionConfiguration"/></returns>
        public static ValueExceptionConfiguration HasValueException<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ValueExceptionConfiguration>();

        /// <summary>
        /// <see cref="ResourceExceptionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ResourceExceptionConfiguration"/></returns>
        public static ResourceExceptionConfiguration HasResourceException<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ResourceExceptionConfiguration>();

        /// <summary>
        /// <see cref="ResourceExceptionConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ResourceExceptionConfiguration"/></returns>
        public static ResourceExceptionConfiguration HasResourceException(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ResourceExceptionConfiguration>();

        /// <summary>
        /// <see cref="ResourceExceptionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ResourceExceptionConfiguration"/></returns>
        public static ResourceExceptionConfiguration HasResourceException<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ResourceExceptionConfiguration>();

        /// <summary>
        /// <see cref="DataModificationExceptionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="DataModificationExceptionConfiguration"/></returns>
        public static DataModificationExceptionConfiguration HasDataModificationException<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<DataModificationExceptionConfiguration>();

        /// <summary>
        /// <see cref="DataModificationExceptionConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="DataModificationExceptionConfiguration"/></returns>
        public static DataModificationExceptionConfiguration HasDataModificationException(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<DataModificationExceptionConfiguration>();

        /// <summary>
        /// <see cref="DataModificationExceptionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="DataModificationExceptionConfiguration"/></returns>
        public static DataModificationExceptionConfiguration HasDataModificationException<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<DataModificationExceptionConfiguration>();

        /// <summary>
        /// <see cref="IsLanguageDependentConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="IsLanguageDependentConfiguration"/></returns>
        public static IsLanguageDependentConfiguration HasIsLanguageDependent(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<IsLanguageDependentConfiguration>();

        /// <summary>
        /// <see cref="ResourcePathConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ResourcePathConfiguration"/></returns>
        public static ResourcePathConfiguration HasResourcePath<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ResourcePathConfiguration>();

        /// <summary>
        /// <see cref="ResourcePathConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ResourcePathConfiguration"/></returns>
        public static ResourcePathConfiguration HasResourcePath(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ResourcePathConfiguration>();

        /// <summary>
        /// <see cref="PermissionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="PermissionsConfiguration"/></returns>
        public static PermissionsConfiguration HasPermissions<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<PermissionsConfiguration>();

        /// <summary>
        /// <see cref="PermissionsConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="PermissionsConfiguration"/></returns>
        public static PermissionsConfiguration HasPermissions(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<PermissionsConfiguration>();

        /// <summary>
        /// <see cref="PermissionsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="PermissionsConfiguration"/></returns>
        public static PermissionsConfiguration HasPermissions<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<PermissionsConfiguration>();

        /// <summary>
        /// <see cref="ContentIDConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ContentIDConfiguration"/></returns>
        public static ContentIDConfiguration HasContentID<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ContentIDConfiguration>();

        /// <summary>
        /// <see cref="ContentIDConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ContentIDConfiguration"/></returns>
        public static ContentIDConfiguration HasContentID(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ContentIDConfiguration>();

        /// <summary>
        /// <see cref="ContentIDConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ContentIDConfiguration"/></returns>
        public static ContentIDConfiguration HasContentID<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ContentIDConfiguration>();

        /// <summary>
        /// <see cref="ImmutableConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ImmutableConfiguration"/></returns>
        public static ImmutableConfiguration HasImmutable(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ImmutableConfiguration>();

        /// <summary>
        /// <see cref="ComputedConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ComputedConfiguration"/></returns>
        public static ComputedConfiguration HasComputed(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ComputedConfiguration>();

        /// <summary>
        /// <see cref="ComputedDefaultValueConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ComputedDefaultValueConfiguration"/></returns>
        public static ComputedDefaultValueConfiguration HasComputedDefaultValue(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ComputedDefaultValueConfiguration>();

        /// <summary>
        /// <see cref="IsURLConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="IsURLConfiguration"/></returns>
        public static IsURLConfiguration HasIsURL(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<IsURLConfiguration>();

        /// <summary>
        /// <see cref="AcceptableMediaTypesConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="AcceptableMediaTypesConfiguration"/></returns>
        public static AcceptableMediaTypesConfiguration HasAcceptableMediaTypes(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<AcceptableMediaTypesConfiguration>();

        /// <summary>
        /// <see cref="AcceptableMediaTypesConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="AcceptableMediaTypesConfiguration"/></returns>
        public static AcceptableMediaTypesConfiguration HasAcceptableMediaTypes<T>(this EntityTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<AcceptableMediaTypesConfiguration>();

        /// <summary>
        /// <see cref="MediaTypeConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="MediaTypeConfiguration"/></returns>
        public static MediaTypeConfiguration HasMediaType(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<MediaTypeConfiguration>();

        /// <summary>
        /// <see cref="MediaTypeConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="MediaTypeConfiguration"/></returns>
        public static MediaTypeConfiguration HasMediaType<T>(this EntityTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<MediaTypeConfiguration>();

        /// <summary>
        /// <see cref="IsMediaTypeConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="IsMediaTypeConfiguration"/></returns>
        public static IsMediaTypeConfiguration HasIsMediaType(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<IsMediaTypeConfiguration>();

        /// <summary>
        /// <see cref="ContentDispositionConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ContentDispositionConfiguration"/></returns>
        public static ContentDispositionConfiguration HasContentDisposition(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ContentDispositionConfiguration>();

        /// <summary>
        /// <see cref="ContentDispositionConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ContentDispositionConfiguration"/></returns>
        public static ContentDispositionConfiguration HasContentDisposition<T>(this EntityTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ContentDispositionConfiguration>();

        /// <summary>
        /// <see cref="OptimisticConcurrencyConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="OptimisticConcurrencyConfiguration"/></returns>
        public static OptimisticConcurrencyConfiguration HasOptimisticConcurrency<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<OptimisticConcurrencyConfiguration>();

        /// <summary>
        /// <see cref="AdditionalPropertiesConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="AdditionalPropertiesConfiguration"/></returns>
        public static AdditionalPropertiesConfiguration HasAdditionalProperties<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<AdditionalPropertiesConfiguration>();

        /// <summary>
        /// <see cref="AutoExpandConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="AutoExpandConfiguration"/></returns>
        public static AutoExpandConfiguration HasAutoExpand(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<AutoExpandConfiguration>();

        /// <summary>
        /// <see cref="AutoExpandConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="AutoExpandConfiguration"/></returns>
        public static AutoExpandConfiguration HasAutoExpand<T>(this EntityTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<AutoExpandConfiguration>();

        /// <summary>
        /// <see cref="AutoExpandReferencesConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="AutoExpandReferencesConfiguration"/></returns>
        public static AutoExpandReferencesConfiguration HasAutoExpandReferences(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<AutoExpandReferencesConfiguration>();

        /// <summary>
        /// <see cref="MayImplementConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="MayImplementConfiguration"/></returns>
        public static MayImplementConfiguration HasMayImplement<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<MayImplementConfiguration>();

        /// <summary>
        /// <see cref="MayImplementConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="MayImplementConfiguration"/></returns>
        public static MayImplementConfiguration HasMayImplement(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<MayImplementConfiguration>();

        /// <summary>
        /// <see cref="MayImplementConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="MayImplementConfiguration"/></returns>
        public static MayImplementConfiguration HasMayImplement<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<MayImplementConfiguration>();

        /// <summary>
        /// <see cref="OrderedConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="OrderedConfiguration"/></returns>
        public static OrderedConfiguration HasOrdered<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<OrderedConfiguration>();

        /// <summary>
        /// <see cref="OrderedConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="OrderedConfiguration"/></returns>
        public static OrderedConfiguration HasOrdered(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<OrderedConfiguration>();

        /// <summary>
        /// <see cref="PositionalInsertConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="PositionalInsertConfiguration"/></returns>
        public static PositionalInsertConfiguration HasPositionalInsert<TEntity>(this EntitySetConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<PositionalInsertConfiguration>();

        /// <summary>
        /// <see cref="PositionalInsertConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="PositionalInsertConfiguration"/></returns>
        public static PositionalInsertConfiguration HasPositionalInsert(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<PositionalInsertConfiguration>();

        /// <summary>
        /// <see cref="AlternateKeysConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="AlternateKeysConfiguration"/></returns>
        public static AlternateKeysConfiguration HasAlternateKeys<TEntity>(this EntitySetConfiguration<TEntity> navigationSource, Func<AlternateKeyConfiguration, AlternateKeyConfiguration> sourceConfigurations) where TEntity : class
        {
            var instance = new AlternateKeyConfiguration();
            sourceConfigurations(instance);

            var configuration = navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<AlternateKeysConfiguration>();
            configuration.HasAlternateKeys(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="AlternateKeysConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="AlternateKeysConfiguration"/></returns>
        public static AlternateKeysConfiguration HasAlternateKeys(this VocabularyConfigurationsBase vocabularyConfigurationsBase, Func<AlternateKeyConfiguration, AlternateKeyConfiguration> sourceConfigurations)
        {
            var instance = new AlternateKeyConfiguration();
            sourceConfigurations(instance);

            var configuration = vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<AlternateKeysConfiguration>();
            configuration.HasAlternateKeys(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="AlternateKeysConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <param name="sourceConfigurations">The configuration to set</param>
        /// <returns><see cref="AlternateKeysConfiguration"/></returns>
        public static AlternateKeysConfiguration HasAlternateKeys<T>(this EntityTypeConfiguration<T> structuredType, Func<AlternateKeyConfiguration, AlternateKeyConfiguration> sourceConfigurations) where T : class
        {
            var instance = new AlternateKeyConfiguration();
            sourceConfigurations(instance);

            var configuration = structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<AlternateKeysConfiguration>();
            configuration.HasAlternateKeys(instance);

            return configuration;
        }

        /// <summary>
        /// <see cref="OperationAvailableConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="OperationAvailableConfiguration"/></returns>
        public static OperationAvailableConfiguration HasOperationAvailable(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<OperationAvailableConfiguration>();

        /// <summary>
        /// <see cref="RequiresExplicitBindingConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="RequiresExplicitBindingConfiguration"/></returns>
        public static RequiresExplicitBindingConfiguration HasRequiresExplicitBinding(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<RequiresExplicitBindingConfiguration>();

        /// <summary>
        /// <see cref="ExplicitOperationBindingsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ExplicitOperationBindingsConfiguration"/></returns>
        public static ExplicitOperationBindingsConfiguration HasExplicitOperationBindings<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ExplicitOperationBindingsConfiguration>();

        /// <summary>
        /// <see cref="ExplicitOperationBindingsConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ExplicitOperationBindingsConfiguration"/></returns>
        public static ExplicitOperationBindingsConfiguration HasExplicitOperationBindings(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<ExplicitOperationBindingsConfiguration>();

        /// <summary>
        /// <see cref="ExplicitOperationBindingsConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="ExplicitOperationBindingsConfiguration"/></returns>
        public static ExplicitOperationBindingsConfiguration HasExplicitOperationBindings<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<ExplicitOperationBindingsConfiguration>();

        /// <summary>
        /// <see cref="SymbolicNameConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="SymbolicNameConfiguration"/></returns>
        public static SymbolicNameConfiguration HasSymbolicName<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<SymbolicNameConfiguration>();

        /// <summary>
        /// <see cref="SymbolicNameConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="SymbolicNameConfiguration"/></returns>
        public static SymbolicNameConfiguration HasSymbolicName(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<SymbolicNameConfiguration>();

        /// <summary>
        /// <see cref="SymbolicNameConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="SymbolicNameConfiguration"/></returns>
        public static SymbolicNameConfiguration HasSymbolicName<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<SymbolicNameConfiguration>();

        /// <summary>
        /// <see cref="GeometryFeatureConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="TEntity">The entity type of the navigation source.</typeparam>
        /// <param name="navigationSource">The <see cref="IEdmNavigationSource"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="GeometryFeatureConfiguration"/></returns>
        public static GeometryFeatureConfiguration HasGeometryFeature<TEntity>(this NavigationSourceConfiguration<TEntity> navigationSource) where TEntity : class
            => navigationSource?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<GeometryFeatureConfiguration>();

        /// <summary>
        /// <see cref="GeometryFeatureConfiguration"/> configuration
        /// </summary>
        /// <param name="vocabularyConfigurationsBase">The <see cref="IEdmVocabularyAnnotatable"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="GeometryFeatureConfiguration"/></returns>
        public static GeometryFeatureConfiguration HasGeometryFeature(this VocabularyConfigurationsBase vocabularyConfigurationsBase)
            => vocabularyConfigurationsBase?.VocabularyTermConfigurations.GetOrCreateConfiguration<GeometryFeatureConfiguration>();

        /// <summary>
        /// <see cref="GeometryFeatureConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="GeometryFeatureConfiguration"/></returns>
        public static GeometryFeatureConfiguration HasGeometryFeature<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<GeometryFeatureConfiguration>();

        /// <summary>
        /// <see cref="AnyStructureConfiguration"/> configuration
        /// </summary>
        /// <typeparam name="T">The type of the structured type.</typeparam>
        /// <param name="structuredType">The <see cref="IEdmStructuredType"/> that can be built using <see cref="ODataModelBuilder"/>.</param>
        /// <returns><see cref="AnyStructureConfiguration"/></returns>
        public static AnyStructureConfiguration HasAnyStructure<T>(this StructuralTypeConfiguration<T> structuredType) where T : class
            => structuredType?.Configuration.VocabularyTermConfigurations.GetOrCreateConfiguration<AnyStructureConfiguration>();

        /// <summary>
        /// Add vocabulary annotations to a model target.
        /// </summary>
        /// <param name="model"><see cref="EdmModel"/> to add annotations to</param>
        /// <param name="target"><see cref="EdmNavigationSource"/> to annotate</param>
        /// <param name="navigationSourceConfiguration"><see cref="NavigationSourceConfiguration"/> containing the collection of <see cref="VocabularyTermConfiguration"/> annotation configurations</param>
        public static void SetVocabularyConfigurationAnnotations(this EdmModel model, EdmNavigationSource target, NavigationSourceConfiguration navigationSourceConfiguration)
            => model.SetVocabularyConfigurationAnnotations(target as IEdmVocabularyAnnotatable, navigationSourceConfiguration?.VocabularyTermConfigurations.Values);

        /// <summary>
        /// Add vocabulary annotations to a model target.
        /// </summary>
        /// <param name="model"><see cref="EdmModel"/> to add annotations to</param>
        /// <param name="target"><see cref="EdmOperation"/> to annotate</param>
        /// <param name="operationConfiguration"><see cref="OperationConfiguration"/> containing the collection of <see cref="VocabularyTermConfiguration"/> annotation configurations</param>
        public static void SetVocabularyConfigurationAnnotations(this EdmModel model, EdmOperation target, OperationConfiguration operationConfiguration)
            => model.SetVocabularyConfigurationAnnotations(target as IEdmVocabularyAnnotatable, operationConfiguration?.VocabularyTermConfigurations.Values);

        /// <summary>
        /// Add vocabulary annotations to a model target.
        /// </summary>
        /// <param name="model"><see cref="EdmModel"/> to add annotations to</param>
        /// <param name="target"><see cref="IEdmVocabularyAnnotatable"/> to annotate</param>
        /// <param name="configurations">Collection of <see cref="VocabularyTermConfiguration"/> annotation configurations</param>
        public static void SetVocabularyConfigurationAnnotations(this EdmModel model, IEdmVocabularyAnnotatable target, IEnumerable<VocabularyTermConfiguration> configurations)
        {
            _ = model ?? throw Error.ArgumentNull(nameof(model));
            if (target == null || configurations == null)
            {
                return;
            }

            foreach (var configuration in configurations)
            {
                configuration.SetVocabularyAnnotations(model, target);
            }
        }

        private static TConfiguration GetOrCreateConfiguration<TConfiguration>(this Dictionary<Type, VocabularyTermConfiguration> vocabularyConfigurations)
            where TConfiguration : VocabularyTermConfiguration, new()
        {
            if (vocabularyConfigurations.TryGetValue(typeof(TConfiguration), out var configuration))
            {
                return (TConfiguration)configuration;
            }

            configuration = new TConfiguration();
            vocabularyConfigurations.Add(typeof(TConfiguration), configuration);

            return (TConfiguration)configuration;
        }


    }
}

