name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

# No trigger for nightly
trigger: none

# No Pull request (PR) triggers for nightly
pr: none

# Nightly using schedules
schedules:
- cron: "0 0 * * Mon,Tue,Wed,Thu,Fri"
  displayName: midnightly build
  branches:
    include:
    - main

pool:
  vmImage: 'windows-2022'

variables:
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'
  snExe: 'C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\sn.exe'
  snExe64: 'C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\sn.exe'
  ProductBinPath: '$(Build.SourcesDirectory)\src\Microsoft.OData.ModelBuilder\bin\$(BuildConfiguration)'
  skipComponentGovernanceDetection: true
  
steps:
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '>=5.2.0'

# Add this Command to Include the .NET 6 SDK
- task: UseDotNet@2
  displayName: Use .NET 6.0
  inputs:
    packageType: 'sdk'
    version: '6.0.x'
    
# because the assemblies are delay-signed, we need to disable
# strong name validation so that the tests may run,
# otherwise our assemblies will fail to load
- task: Powershell@2
  displayName: 'Skip strong name validation'
  inputs:
    targetType: 'inline'
    script: |
      & "$(snExe)" /Vr $(ProductBinPath)\$(mainDll)
      & "$(snExe64)" /Vr $(ProductBinPath)\$(mainDll)
      & "$(snExe)" /Vr $(testBinPath)\$(testDll)
      & "$(snExe64)" /Vr $(testBinPath)\$(testDll)
  enabled: false
  
# Build the Product project
- task: DotNetCoreCLI@2
  displayName: 'build Microsoft.OData.ModelBuilder.csproj '
  inputs:
    projects: '$(Build.SourcesDirectory)\src\Microsoft.OData.ModelBuilder\Microsoft.OData.ModelBuilder.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-incremental'

# Build the Unit test project
- task: DotNetCoreCLI@2
  displayName: 'build Microsoft.OData.ModelBuilder Unit test project'
  inputs:
    projects: '$(Build.SourcesDirectory)\test\Microsoft.OData.ModelBuilder.Tests\Microsoft.OData.ModelBuilder.Tests.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-incremental'

- task: UseDotNet@2
  displayName: Use .NET 3.x
  inputs:
    packageType: 'sdk'
    version: '3.x'

# Run the Unit test
- task: DotNetCoreCLI@2
  displayName: 'Unit Tests (Microsoft.OData.ModelBuilder.Tests.csproj) '
  inputs:
    command: test
    projects: '$(Build.SourcesDirectory)\test\Microsoft.OData.ModelBuilder.Tests\Microsoft.OData.ModelBuilder.Tests.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-build'

# CredScan
- task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
  displayName: 'Run CredScan - Src'
  inputs:
    toolMajorVersion: 'V2'
    scanFolder: '$(Build.SourcesDirectory)\src'
    debugMode: false

- task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
  displayName: 'Run CredScan - Test'
  inputs:
    toolMajorVersion: 'V2'
    scanFolder: '$(Build.SourcesDirectory)\test'
    debugMode: false
  
# Microsoft.CodeAnalysis.FxCopAnalyzers is added into the project.
# Typically, .NET Standard (.NET Core) project doesn't need the FxCop.

# Needn't the AntiMalware@3 task?
- task: AntiMalware@3
  displayName: 'Run MpCmdRun.exe - ProductBinPath'
  inputs:
    FileDirPath: '$(ProductBinPath)'
  enabled: false

- task: BinSkim@3
  displayName: 'Run BinSkim - Product Binaries'
  inputs:
    InputType: Basic
    AnalyzeTarget: '$(ProductBinPath)\**\Microsoft.OData.ModelBuilder.dll'
    AnalyzeSymPath: '$(ProductBinPath)'
    AnalyzeVerbose: true
    AnalyzeHashes: true
    AnalyzeEnvironment: true

- task: PublishSecurityAnalysisLogs@2
  displayName: 'Publish Security Analysis Logs'
  inputs:
    ArtifactName: SecurityLogs

- task: PostAnalysis@1
  displayName: 'Post Analysis'
  inputs:
    BinSkim: true
    CredScan: true
    PoliCheck: true

- task: EsrpCodeSigning@5
  displayName: 'ESRP CodeSign - WebApi Product Signing'
  inputs:
    ConnectedServiceName: 'ESRP CodeSigning - OData'
    AppRegistrationClientId: 'ce6e119c-a8c2-4744-9699-cd5389102d0d'
    AppRegistrationTenantId: '33e01921-4d64-4f8c-a055-5bdaffd5e33d'
    AuthAKVName: ODataESRPKeyVault
    AuthCertName: ODataCodeSignAuth-AutoRotate
    AuthSignCertName: ODataCodeSigningCert2024
    ServiceEndpointUrl: 'https://api.esrp.microsoft.com/api/v2'
    FolderPath: '$(ProductBinPath)'
    Pattern: 'Microsoft.OData.ModelBuilder.dll'
    signConfigType: inlineSignParams
    inlineOperation: |
     [
       {
         "keyCode": "MSSharedLibSnKey",
         "operationSetCode": "StrongNameSign",
         "parameters": null,
         "toolName": "sn.exe",
         "toolVersion": "V4.6.1586.0"
       },
       {
         "keyCode": "MSSharedLibSnKey",
         "operationSetCode": "StrongNameVerify",
         "parameters": null,
         "toolName": "sn.exe",
         "toolVersion": "V4.6.1586.0"
       },
       {
         "keyCode": "CP-230012",
         "operationSetCode": "SigntoolSign",
         "parameters": [
         {
           "parameterName": "OpusName",
           "parameterValue": "Microsoft"
         },
         {
           "parameterName": "OpusInfo",
           "parameterValue": "http://www.microsoft.com"
         },
         {
           "parameterName": "PageHash",
           "parameterValue": "/NPH"
         },
         {
           "parameterName": "FileDigest",
           "parameterValue": "/fd sha256"
         },
         {
           "parameterName": "TimeStamp",
           "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
         }
         ],
         "toolName": "signtool.exe",
         "toolVersion": "6.2.9304.0"
       },
       {
         "keyCode": "CP-230012",
         "operationSetCode": "SigntoolVerify",
         "parameters": [
         {
           "parameterName": "VerifyAll",
           "parameterValue": "/all"
         }
         ],
         "toolName": "signtool.exe",
         "toolVersion": "6.2.9304.0"
       }
     ]
    VerboseLogin: true
    
- task: MSBuild@1
  displayName: 'Get Nuget Package Metadata'
  inputs:
    solution: '$(Build.SourcesDirectory)\build\GetNugetPackageMetadata.proj'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    
- task: NuGetCommand@2
  displayName: 'NuGet - pack Microsoft.OData.ModelBuilder.Nightly.nuspec '
  inputs:
    command: custom
    arguments: 'pack $(Build.SourcesDirectory)\src\Microsoft.OData.ModelBuilder\Microsoft.OData.ModelBuilder.Nightly.nuspec -NonInteractive -OutputDirectory $(Build.ArtifactStagingDirectory)\Nuget -Properties Configuration=$(BuildConfiguration);ProductRoot=$(ProductBinPath);SourcesRoot=$(Build.SourcesDirectory);VersionFullSemantic=$(VersionFullSemantic);NightlyBuildVersion=$(VersionNugetNightlyBuild);VersionNuGetSemantic=$(VersionNuGetSemantic);SystemComponentPackageDependency="$(SystemComponentPackageDependency)";ODataLibPackageDependency="$(ODataLibPackageDependency)" -Verbosity Detailed -Symbols -Symbols -SymbolPackageFormat snupkg'
    
- task: NuGetCommand@2
  displayName: 'NuGet - pack Microsoft.OData.ModelBuilder.Release.nuspec '
  inputs:
    command: custom
    arguments: 'pack $(Build.SourcesDirectory)\src\Microsoft.OData.ModelBuilder\Microsoft.OData.ModelBuilder.Release.nuspec -NonInteractive -OutputDirectory $(Build.ArtifactStagingDirectory)\Nuget -Properties Configuration=$(BuildConfiguration);ProductRoot=$(ProductBinPath);SourcesRoot=$(Build.SourcesDirectory);VersionFullSemantic=$(VersionFullSemantic);VersionNuGetSemantic=$(VersionNuGetSemantic);SystemComponentPackageDependency="$(SystemComponentPackageDependency)";ODataLibPackageDependency="$(ODataLibPackageDependency)" -Verbosity Detailed -Symbols -Symbols -SymbolPackageFormat snupkg'
   
- task: EsrpCodeSigning@5
  displayName: 'ESRP CodeSigning Nuget Packages'
  inputs:
    ConnectedServiceName: 'ESRP CodeSigning - OData'
    AppRegistrationClientId: 'ce6e119c-a8c2-4744-9699-cd5389102d0d'
    AppRegistrationTenantId: '33e01921-4d64-4f8c-a055-5bdaffd5e33d'
    AuthAKVName: ODataESRPKeyVault
    AuthCertName: ODataCodeSignAuth-AutoRotate
    AuthSignCertName: ODataCodeSigningCert2024
    ServiceEndpointUrl: 'https://api.esrp.microsoft.com/api/v2'
    FolderPath: '$(Build.ArtifactStagingDirectory)\Nuget'
    Pattern: '*.nupkg'
    signConfigType: inlineSignParams
    inlineOperation: |
     [
         {
             "keyCode": "CP-401405",
             "operationSetCode": "NuGetSign",
             "parameters": [ ],
             "toolName": "sign",
             "toolVersion": "1.0"
         },
         {
             "keyCode": "CP-401405",
             "operationSetCode": "NuGetVerify",
             "parameters": [ ],
             "toolName": "sign",
             "toolVersion": "1.0"
         }
     ]
    VerboseLogin: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact - Nuget Packages'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\Nuget'
    ArtifactName: Nuget

# Push the odata model builder nightly to MyGet
- task: NuGetCommand@2
  displayName: 'NuGet push - Nightly packages to MyGet'
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)\Nuget\*Nightly*.nupkg'
    nuGetFeedType: external
    publishFeedCredentials: 'MyGet.org - OData.net new nightly feed'